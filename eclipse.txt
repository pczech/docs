*******************************************************************************
Eclipse 3.8 Indigo (Ubuntu 14.04)
==================


*******************************************************************************
Editor
------

Show line numbers
-----------------
Menu -> Window -> Preferences -> General -> Editors -> Text Editors -> 
Select 'Show Line Numbers'

Quickdiff
---------
Menu -> Window -> Preferences -> General -> Editors -> Text Editors ->
Quick Diff


*******************************************************************************
Install and configure EGit
--------------------------
http://www.vogella.com/tutorials/EclipseGit/article.html
http://wiki.eclipse.org/EGit/User_Guide

Menu -> Help -> Install new software
Work with: 'select Indigo Update Site - http://download.eclipse.org/releases/indigo/'
Find and select Eclipse EGit (1.3.0.201202151440-r)

Warning
Latest versions of EGit are available at http://download.eclipse.org/egit/updates,
however they do not support older Eclipse versions. Use Indigo compatible
version. See also http://wiki.eclipse.org/EGit/FAQ#What_versions_of_Eclipse_does_EGit_target.3F

Configuration
-------------
Menu -> Window -> Preferences -> Team -> Git:
Default repository: /home/<user>/Dev/tmp (always choose directory)

Window -> Preferences -> Team -> Git -> Configuration
Use git config if already present (User Settings: /home/<user>/.gitconfig).

Enable EGit menus
-----------------
Menu -> Window -> Customize Perspective (e.g. default Resource)
Select Tab 'Command Groups Availability' and select Git. Git options should be
set automatically for 'Tool Bar Visibility', 'Menu Visibility'.

Import local git repository
---------------------------
If local git repository is imported via:
File -> Import -> Git -> Local -> ... 
then Eclipse doesn't recognize that the project is in git version control.
To solve the problem choose the option 'Team -> Share project...' in project
context menu and select 'Use or create repository in parent folder'.

Or just create a bare repository, clone it to Eclipse working directory, using
URI and Local File method.


*******************************************************************************
Install and configure PDT
-------------------------
Menu -> Help -> Install New Software -> Select 'Select the Indigo update site'
Find and select PDT

*******************************************************************************
Configure PDT for Drupal
------------------------

Eclipse Hook Templates
----------------------
Download the templates https://www.drupal.org/project/eclipse
Menu -> Window -> Preferences -> PHP -> Editor -> Templates
Import the downloaded XML file.

PDT Config
----------
Make sure Drupal file types are recognized as PHP files:
Menu -> Window -> Preferences -> General -> Content Types
Select Text -> PHP Content Type. Add the *.engine, *.theme, *.install, *.inc,
*.make, *.module, *.profile, *.test file types so that these files will be 
recognized as PHP.

This procedure doesn't work for Indigo 3.8:
Menu -> Window -> Preferences -> General -> Editors -> File Associations
Add the *.engine, *.theme, *.install, *.inc, *.make, *.module, *.profile,
*.test file types and for each add PHP Editor so that these files will be
recognized as PHP.

Make sure the file encoding and characters are Unix friendly so that any code
can be committed back in to the Drupal repositories:
Menu -> Window -> Preferences -> General -> Workspace
Check Text file encoding and select:
  Text file encoding: UTF-8
  New text file line delimiter: UNIX
    
Menu -> Window -> Preferences -> PHP -> Editor -> Typing
Uncheck 'When pasting' - 'Adjust indentation'. Otherwise Eclipse will convert
Unix newline characters to Windows when pasting into an empty line.

Ensure that spaces are used instead of tabs:
Menu -> Window -> Preferences -> General -> Editors -> Text Editors:
Check 'Insert spaces for tabs'

Menu -> Window -> Preferences -> PHP -> Code Style -> Formatter:
  Set Tab policy: Spaces
  Intendation size: 2

Remove trailing whitespaces
Menu -> Window -> Preferences -> PHP -> Editor -> Save Actions:
  Check 'Remove trailing whitespace'
  Select 'All lines'

https://www.drupal.org/node/75242


*******************************************************************************
Install and configure WPT
-------------------------
TODO
https://www.drupal.org/node/75242


*******************************************************************************
Configure XDebug
----------------
Install XDebug module for php (see php.txt)

XDebug and Zend debuggers are already predefined, see:
Menu -> Window -> Preferences -> PHP -> Debug -> Installed Debuggers

Set XDebug as default Eclipse debugger:
Menu -> Window -> Preferences -> PHP -> Debug
PHP Debugger: XDebug

PHP Web Application
-------------------
Menu -> Run -> Debug Configurations -> PHP Web Application ->New Configuration
Add new configuration, give a name e.g. dev01
Add /dev01/index.php to 'File' field.
URL: Auto generate

PHP CLI Application
-------------------
TODO

Debug config shall be defined for every project like ./web/devXX

https://www.drupal.org/node/75242#XDebug
http://wiki.eclipse.org/Debugging_using_XDebug


*******************************************************************************
Workspaces
----------
Menu -> Window -> Preferences -> General -> Startup and Shutdown -> Workspaces:
Select workspace settings storage




*******************************************************************************
Eclipse 4.4 Luna (coexisting with Indigo)
================

Installation
------------
Download eclipse-standard-luna-R-linux-gtk-x86_64.tar.gz

Extract Eclipse to /opt/ for global use:
cd /opt/ && sudo tar -zxvf ~/Downloads/eclipse-*.tar.gz

Rename the directory:
sudo mv eclipse eclipse-4.4

Create a launcher shortcut:
if an eclipse is already installed, make a copy of its launcher for the new eclipse:
cd /usr/share/applications
sudo cp eclipse.desktop eclipse-4.4.desktop

Edit the launcher shortcut:
sudo gedit eclipse-4.4.desktop

Example content:
[Desktop Entry]
Type=Application
Name=Eclipse 4
Comment=Eclipse Integrated Development Environment
Icon=/opt/eclipse-4.4/icon.xpm
Exec=/opt/eclipse-4.4/eclipse
Terminal=false
Categories=Development;IDE;

Open Eclipse from Unity Dash search results


*******************************************************************************
Editor
------

Menu -> Window -> Preferences -> General -> Editors -> Text Editors -> ...

Show line numbers
-----------------
... -> Select 'Show Line Numbers'

Quickdiff
---------
... -> Quick Diff

Use spaces instead of tabs
--------------
... -> Check 'Insert spaces for tabs'


*******************************************************************************
Configure EGit
--------------

Menu -> Window -> Preferences -> Team -> Git:
Default repository: /home/<user>/Dev/tmp (always choose directory)

Window -> Preferences -> Team -> Git -> Configuration
Use git config if already present (User Settings: /home/<user>/.gitconfig).

Enable EGit menus
-----------------
Menu -> Window -> Customize Perspective (e.g. default Resource)
Select Tab 'Command Groups Availability' and select Git. Git options should be
set automatically for 'Tool Bar Visibility'.


*******************************************************************************
PDT
---
Menu -> Help -> Install New Software -> Work with: "Luna ..."
Select "Programming Languages" -> PDT
Enable EGit menus for PHP perspective


*******************************************************************************
CDT
---
Menu -> Help -> Install New Software -> Work with: "Luna ..."
Select "Programming Languages" -> CDT
Enable EGit menus for C/C++ perspective


*******************************************************************************
C/C++ Code style
----------------
Menu -> Window -> Preferences -> C/C++ -> Code Style -> Formatter


*******************************************************************************
C/C++ Cross-toolchain setup (Yocto)
---------------------------
Prepare and install Yocto cross-toolchain. See yocto.txt for more details.
In a terminal source the toolchain environment script and then run eclipse from
the terminal - this is necessary to make the environment variables visible for
eclipse(*).

Create C/C++ project in eclipse:
Menu -> File -> New -> C Project
Give a name and a location for the project -> Next
Select Configurations Debug, Release -> Finish

Build configuration
-------------------
Select the project in Project Explorer 
Menu -> Project -> Properties -> C/C++ Build -> Manage Configurations...

Oder paths to Build configuration page: 
Context Menu -> Build Configurations -> Manage...
Context Menu -> Properties -> Build Configurations -> Manage...

... -> New -> Give name e.g. "Debug ARM" and select "Copy settings from
Existing configuration"

Menu -> Project -> Properties -> C/C++ Build -> Settings
Select the new configuration in "Configuration: " field, then:

Settings -> GCC C Compiler -> Command: arm-poky-linux-gnueabi-gcc
Settings -> GCC C Linker -> Command: arm-poky-linux-gnueabi-gcc
Settings -> GCC C Assembler -> Command: arm-poky-linux-gnueabi-gcc

Add a simple source file to the project.

Select the project in Project Explorer
Context Menu -> Build Configurations -> Set Active -> "Debug ARM"
Context Menu -> Build Project

Check the results in <...>/hello/Debug-ARM/

Context Menu -> Build Configurations -> Set Active -> "Debug"
Context Menu -> Build Project

Check the results in <...>/hello/Debug/

(*) You have native and cross build. This is however not the proper approach,
as different versions of gcc are used for the builds, and the environment
variables are set for all builds, that may lead to unexpected results. The
correct way is to build native gcc and cross gcc from the same source, and 
environment variables specific for a build configuration shall be set only for
the configuration.

Set environment variables
-------------------------
If you need several build configurations with different environment variables,
then you can import the environment to your eclipse projects in the following
way:

Open cross-toolchain environment script, e.g. in Krusader editor and sort the
lines in alphabetic order for the convenience:
  Menu -> Tools -> Scripts -> Editing -> Sort selected text

In a terminal source the toolchain environment script and then run eclipse from
the terminal
Select the project in Project Explorer
Context Menu -> Properties -> C/C++ Build -> Environment
Select your configuration in "Configuration: " field, then:
Press "Select..." button, and select the variables with help of sorted
environment script.
Apply the changes, close eclipse, close the terminal with the sourced
environment
Start eclipse (without any environment), now the required environment is set
for the given build configuration.

Build all configurations
------------------------
Menu -> Window -> Preferences -> C/C++ -> Build:
  Select "Build all configurations in each project".
  
or:

Select the project in Project Explorer
Context Menu -> Build Configurations -> Build All
  
Clean all configurations
------------------------
Select the project in Project Explorer
Context Menu -> Build Configurations -> Clean All

Local Run configuration
-----------------------
TODO


Local Debug configuration
-------------------------
TODO


*******************************************************************************
Remote Run and Debug
--------------------
There are a few eclipse plugins, which helps you deploy the built application
to the target, launch it and also debug it remotely. Several alternative
solutions are available.


*******************************************************************************
1. Remote System Explorer + Remote Luncher + GDB

Install openssh, openssh-sftp-server, gdbserver packages on the target.

Install and configure eclipse plugins
-------------------------------------
Menu -> Help -> Install New Software -> Work with "Luna ..."
Select Mobile and Device Development -> ...
  -> Remote System Explorer End-User Runtime
  -> C/C++ Remote Launch (Requires RSE Remote System Explorer)
  
Create RSE connection
---------------------
Open RSE perspective:
Menu -> Window -> Open Perspective -> Other... -> Remote System Explorer

Remote Systems -> Icon "Define a connection to remote system" or
Menu -> File -> New -> Other... -> Remote System Explorer -> Connection

System type:
  Select Linux -> Next
Remote Linux System Connection:
  Host Name: enter the target IP and a name of the connection -> Next
Files:
  Select ssh.files -> Next
Processes:
  Select processes.shell.linux -> Next
Shells:
  Select ssh.shells -> Next
Ssh Terminals:
  Select ssh.terminals -> Finish

Remote Systems -> Select the connection -> Context Menu -> Properties -> Host
Default User ID: <target_user>

Check RSE connection
--------------------
Run the target
Remote Systems -> Select the connection -> Context Menu -> Connect

Remote Run configuration
------------------------
Select the project in Project Explorer
Context Menu -> Run As -> Run configurations...
Select Remote C/C++ Application and then "New launch configuration" or select
an existing configuration and then "Duplicate"

Main Tab ->
Connection:
  Select the connection to the target
Project:
  Enter project name, e.g. hello
C/C++ Application:
  Enter path to the application on Host, e.g. Release-ARM/hello 
Remote Absolute File Path to C/C++ Application:
  Enter path to the application on the target (including the application name):
  /home/root/hello
  
Apply the settings, press 'Run' button to run remotely the application. 

Remote Debug configuration
--------------------------
Select the project in Project Explorer
Context Menu -> Debug As -> Debug configurations...
Select Remote C/C++ Application and then "New launch configuration"
Main Tab ->
C/C++ Application:
  Enter path to the application on Host
Project:
  Enter project name, e.g. hello
Connection:
  Select the connection to the target
Remote Absolute File Path to C/C++ Application:
  Enter path to the application on the target (including the application name)
  
Debugger Tab ->
GDB Debugger:
  Enter cross-gdb e.g. arm-poky-linux-gnueabi-gdb

Apply the settings and press 'Debug' button. Debug perspective shall open.

*******************************************************************************
2. TCF Remote System Explorer add-in + Remote Luncher + GDB

Install openssh-sftp-server, tcf-agent, gdbserver packages on the target, or
just add packagegroup-core-eclipse-debug to the image.

Install and configure eclipse plugins
-------------------------------------
Menu -> Help -> Install New Software -> Work with "Luna ..."
Select Mobile and Device Development -> ...
  -> Remote System Explorer End-User Runtime
  -> TCF Remote System Explorer add-in
  -> C/C++ Remote Launch (Requires RSE Remote System Explorer)
  
Create TCF-RSE connection
-------------------------
Open RSE perspective:
Menu -> Window -> Open Perspective -> Other... -> Remote System Explorer

Remote Systems -> Icon "Define a connection to remote system" or
Menu -> File -> New -> Other... -> Remote System Explorer -> Connection

System type:
  Select TCF -> Next
Remote TCF System Connection:
  Host Name: enter the target IP and a name of the connection -> Next
Files:
  Select <...> -> Next
Processes:
  Select <...> -> Next
Shells:
  Select <...> -> Next
Terminals:
  Select <...> -> Finish

Remote Systems -> Select the connection -> Context Menu -> Properties -> Host
Default User ID: <target_user>

Check TCF-RSE connection
--------------------
Run the target
Remote Systems -> Select the connection -> Context Menu -> Connect

Remote Run configuration
------------------------
The configuration is the same like for Method 1, just select TCF connection.

Remote Debug configuration
--------------------------
The configuration is the same like for Method 1, just select TCF connection.


*******************************************************************************
3. TCF Remote System Explorer add-in + TCF Remote Luncher + GDB
---------------------------------------------------------------

*******************************************************************************
4. TCF Remote System Explorer add-in + TCF Remote Luncher + TCF Debugger
------------------------------------------------------------------------

*******************************************************************************
5. TCF Target Explorer + TCF Remote Luncher + TCF Debugger
----------------------------------------------------------




