*******************************************************************************
Eclipse 3.8 Indigo (Ubuntu 14.04)
==================


*******************************************************************************
Editor
------

Show line numbers
-----------------
Menu -> Window -> Preferences -> General -> Editors -> Text Editors -> 
Select 'Show Line Numbers'

Quickdiff
---------
Menu -> Window -> Preferences -> General -> Editors -> Text Editors ->
Quick Diff


*******************************************************************************
Install and configure EGit
--------------------------
http://www.vogella.com/tutorials/EclipseGit/article.html
http://wiki.eclipse.org/EGit/User_Guide

Menu -> Help -> Install new software
Work with: 'select Indigo Update Site - http://download.eclipse.org/releases/indigo/'
Find and select Eclipse EGit (1.3.0.201202151440-r)

Warning
Latest versions of EGit are available at http://download.eclipse.org/egit/updates,
however they do not support older Eclipse versions. Use Indigo compatible
version. See also http://wiki.eclipse.org/EGit/FAQ#What_versions_of_Eclipse_does_EGit_target.3F

Configuration
-------------
Menu -> Window -> Preferences -> Team -> Git:
Default repository: /home/<user>/Dev/tmp (always choose directory)

Window -> Preferences -> Team -> Git -> Configuration
Use git config if already present (User Settings: /home/<user>/.gitconfig).

Enable EGit menus
-----------------
Menu -> Window -> Customize Perspective (e.g. default Resource)
Select Tab 'Command Groups Availability' and select Git. Git options should be
set automatically for 'Tool Bar Visibility', 'Menu Visibility'.

Import local git repository
---------------------------
If local git repository is imported via:
File -> Import -> Git -> Local -> ... 
then Eclipse doesn't recognize that the project is in git version control.
To solve the problem choose the option 'Team -> Share project...' in project
context menu and select 'Use or create repository in parent folder'.

Or just create a bare repository, clone it to Eclipse working directory, using
URI and Local File method.


*******************************************************************************
Install and configure PDT
-------------------------
Menu -> Help -> Install New Software -> Select 'Select the Indigo update site'
Find and select PDT

*******************************************************************************
Configure PDT for Drupal
------------------------

Eclipse Hook Templates
----------------------
Download the templates https://www.drupal.org/project/eclipse
Menu -> Window -> Preferences -> PHP -> Editor -> Templates
Import the downloaded XML file.

PDT Config
----------
Make sure Drupal file types are recognized as PHP files:
Menu -> Window -> Preferences -> General -> Content Types
Select Text -> PHP Content Type. Add the *.engine, *.theme, *.install, *.inc,
*.make, *.module, *.profile, *.test file types so that these files will be 
recognized as PHP.

This procedure doesn't work for Indigo 3.8:
Menu -> Window -> Preferences -> General -> Editors -> File Associations
Add the *.engine, *.theme, *.install, *.inc, *.make, *.module, *.profile,
*.test file types and for each add PHP Editor so that these files will be
recognized as PHP.

Make sure the file encoding and characters are Unix friendly so that any code
can be committed back in to the Drupal repositories:
Menu -> Window -> Preferences -> General -> Workspace
Check Text file encoding and select:
  Text file encoding: UTF-8
  New text file line delimiter: UNIX
    
Menu -> Window -> Preferences -> PHP -> Editor -> Typing
Uncheck 'When pasting' - 'Adjust indentation'. Otherwise Eclipse will convert
Unix newline characters to Windows when pasting into an empty line.

Ensure that spaces are used instead of tabs:
Menu -> Window -> Preferences -> General -> Editors -> Text Editors:
Check 'Insert spaces for tabs'

Menu -> Window -> Preferences -> PHP -> Code Style -> Formatter:
  Set Tab policy: Spaces
  Intendation size: 2

Remove trailing whitespaces
Menu -> Window -> Preferences -> PHP -> Editor -> Save Actions:
  Check 'Remove trailing whitespace'
  Select 'All lines'

https://www.drupal.org/node/75242


*******************************************************************************
Install and configure WPT
-------------------------
TODO
https://www.drupal.org/node/75242


*******************************************************************************
Configure XDebug
----------------
Install XDebug module for php (see php.txt)

XDebug and Zend debuggers are already predefined, see:
Menu -> Window -> Preferences -> PHP -> Debug -> Installed Debuggers

Set XDebug as default Eclipse debugger:
Menu -> Window -> Preferences -> PHP -> Debug
PHP Debugger: XDebug

PHP Web Application
-------------------
Menu -> Run -> Debug Configurations -> PHP Web Application ->New Configuration
Add new configuration, give a name e.g. dev01
Add /dev01/index.php to 'File' field.
URL: Auto generate

PHP CLI Application
-------------------
TODO

Debug config shall be defined for every project like ./web/devXX

https://www.drupal.org/node/75242#XDebug
http://wiki.eclipse.org/Debugging_using_XDebug


*******************************************************************************
Workspaces
----------
Menu -> Window -> Preferences -> General -> Startup and Shutdown -> Workspaces:
Select workspace settings storage




*******************************************************************************
Eclipse 4.4 Luna (coexisting with Indigo)
================

Installation
------------
Download eclipse-standard-luna-R-linux-gtk-x86_64.tar.gz

Extract Eclipse to /opt/ for global use:
cd /opt/ && sudo tar -zxvf ~/Downloads/eclipse-*.tar.gz

Rename the directory:
sudo mv eclipse eclipse-4.4

Create a launcher shortcut:
if an eclipse is already installed, make a copy of its launcher for the new eclipse:
cd /usr/share/applications
sudo cp eclipse.desktop eclipse-4.4.desktop

Edit the launcher shortcut:
sudo gedit eclipse-4.4.desktop

Example content:
[Desktop Entry]
Type=Application
Name=Eclipse 4
Comment=Eclipse Integrated Development Environment
Icon=/opt/eclipse-4.4/icon.xpm
Exec=/opt/eclipse-4.4/eclipse
Terminal=false
Categories=Development;IDE;

Open Eclipse from Unity Dash search results


*******************************************************************************
Editor
------

Menu -> Window -> Preferences -> General -> Editors -> Text Editors -> ...

Show line numbers
-----------------
... -> Select 'Show Line Numbers'

Quickdiff
---------
... -> Quick Diff

Use spaces instead of tabs
--------------
... -> Check 'Insert spaces for tabs'


*******************************************************************************
Configure EGit
--------------

Menu -> Window -> Preferences -> Team -> Git:
Default repository: /home/<user>/Dev/tmp (always choose directory)

Window -> Preferences -> Team -> Git -> Configuration
Use git config if already present (User Settings: /home/<user>/.gitconfig).

Enable EGit menus
-----------------
Menu -> Window -> Customize Perspective (e.g. default Resource)
Select Tab 'Command Groups Availability' and select Git. Git options should be
set automatically for 'Tool Bar Visibility'.


*******************************************************************************
PDT
---
Menu -> Help -> Install New Software -> Work with: "Luna ..."
Select "Programming Languages" -> PDT
Enable EGit menus for PHP perspective


*******************************************************************************
CDT
---
Menu -> Help -> Install New Software -> Work with: "Luna ..."
Select "Programming Languages" -> CDT
Enable EGit menus for C/C++ perspective


*******************************************************************************
C/C++ Code style
----------------
Menu -> Window -> Preferences -> C/C++ -> Code Style -> Formatter


*******************************************************************************
C/C++ Cross-toolchain setup (Yocto)
---------------------------
Prepare and install Yocto cross-toolchain. See yocto.txt for more details.
In a terminal source the toolchain environment script and then run eclipse from
the terminal - this is necessary to make the environment variables visible for
eclipse(*).

Create C/C++ project in eclipse:
Menu -> File -> New -> C Project
Give a name and a location for the project -> Next
Select Configurations Debug, Release -> Finish

Build configuration
-------------------
Select the project in Project Explorer 
Menu -> Project -> Properties -> C/C++ Build -> Manage Configurations...

Oder paths to Build configuration page: 
Context Menu -> Build Configurations -> Manage...
Context Menu -> Properties -> Build Configurations -> Manage...

... -> New -> Give name e.g. "Debug ARM" and select "Copy settings from
Existing configuration"

Menu -> Project -> Properties -> C/C++ Build -> Settings
Select the new configuration in "Configuration: " field, then:

Settings -> GCC C Compiler -> Command: arm-poky-linux-gnueabi-gcc
Settings -> GCC C Linker -> Command: arm-poky-linux-gnueabi-gcc
Settings -> GCC C Assembler -> Command: arm-poky-linux-gnueabi-gcc

Add a simple source file to the project.

Select the project in Project Explorer
Context Menu -> Build Configurations -> Set Active -> "Debug ARM"
Context Menu -> Build Project

Check the results in <...>/hello/Debug-ARM/

Context Menu -> Build Configurations -> Set Active -> "Debug"
Context Menu -> Build Project

Check the results in <...>/hello/Debug/

(*) You have native and cross build. This is however not the proper approach,
as different versions of gcc are used for the builds, and the environment
variables are set for all builds, that may lead to unexpected results. The
correct way is to build native gcc and cross gcc from the same source, and 
environment variables specific for a build configuration shall be set only for
the configuration.

Set environment variables
-------------------------
If you need several build configurations with different environment variables,
then you can import the environment to your eclipse projects in the following
way:

Open cross-toolchain environment script, e.g. in Krusader editor and sort the
lines in alphabetic order for the convenience:
  Menu -> Tools -> Scripts -> Editing -> Sort selected text

In a terminal source the toolchain environment script and then run eclipse from
the terminal
Select the project in Project Explorer
Context Menu -> Properties -> C/C++ Build -> Environment
Select your configuration in "Configuration: " field, then:
Press "Select..." button, and select the variables with help of sorted
environment script.
Apply the changes, close eclipse, close the terminal with the sourced
environment
Start eclipse (without any environment), now the required environment is set
for the given build configuration.

Build all configurations
------------------------
Menu -> Window -> Preferences -> C/C++ -> Build:
  Select "Build all configurations in each project".
  
or:

Select the project in Project Explorer
Context Menu -> Build Configurations -> Build All
  
Clean all configurations
------------------------
Select the project in Project Explorer
Context Menu -> Build Configurations -> Clean All

Local Run configuration
-----------------------
TODO


Local Debug configuration
-------------------------
TODO


*******************************************************************************
Remote Run and Debug
--------------------
There are a few Eclipse plugins, which helps you deploy the application to the
remote system, launch it or debug it remotely. Several alternative solutions
are available and some of them are described here. Every presented solution is
independent of the others.

Verified on: Ubuntu 14.04, Eclipse 4.4 Luna + CDT Plugin, remote systems:
ARM HW Board, QEMUARM.

Make sure you have your C/C++ project in Eclipse and you can build the project
for the remote system in Eclipse (i.e. cross Build Configuration for your C/C++
project is defined and cross toolchain environment variables are visible for
the Build Configuration).


*******************************************************************************
1. Remote System Explorer + Remote Luncher + GDB
------------------------------------------------

Install remote system packages
------------------------------
Required: openssh, openssh-sftp-server, gdbserver.

Install eclipse plugins
-----------------------
Menu -> Help -> Install New Software -> Work with "Luna ..."
Select Mobile and Device Development -> ...
  -> Remote System Explorer End-User Runtime
  -> C/C++ Remote Launch (Requires RSE Remote System Explorer)

Create RSE connection
---------------------
Open RSE perspective:
Menu -> Window -> Open Perspective -> Other... -> Remote System Explorer

Remote Systems -> Button "Define a connection to remote system" or
Menu -> File -> New -> Other... -> Remote System Explorer -> Connection

Configure the new connection:
System type:
  Select Linux -> Next
Remote Linux System Connection:
  Host Name: enter the remote system IP and a name of the connection -> Next
Files:
  Select ssh.files -> Next
Processes:
  Select processes.shell.linux -> Next
Shells:
  Select ssh.shells -> Next
Ssh Terminals:
  Select ssh.terminals -> Finish

Set default user for the remote system:
Remote Systems -> Select the connection -> Context Menu -> Properties -> Host
-> Default User ID: <user>

Check RSE connection
--------------------
Run the remote system with the required packages
Remote Systems -> Select the connection -> Context Menu -> Connect
If the connection is established, you can for example explore files and
processes of the remote system.

Issue: The connection can be established only with QEMUARM, th tested HW board
returned "SSH_MSG_DISCONNECT: 2 Packet corrupt"

Remote Deploy configuration
---------------------------
Open C/C++ perspective
Select the file you want to deploy in Project Explorer:
Context Menu -> Export... or
Menu -> File -> Export...: Export Configuration Window will open.

Select the project and files you want to export if not selected yet. 
Select an export destination:
  Remote Systems -> Remote file system -> Next
Enter Destination folder:
  Select a RSE connection and the folder on the remote system 
Select options:
  Overwrite existing files without warning
  Save the settings of this export in the workspace: provide path and name
  of the rexpfd file (you can store it in your project folder).
  
Remote deploy:
Select the rexpfd file in Project Explorer
Context Menu -> Export to Remote File System

Remote Run configuration
------------------------
Open C/C++ perspective
Select the project in Project Explorer:
Context Menu -> Run As -> Run configurations... or
Menu -> Run -> Run Configurations...
Select Remote C/C++ Application and then "New launch configuration" or select
an existing configuration and then "Duplicate".
Enter a name for the configuration.
Main Tab ->
Connection:
  Select the connection to the remote system
Project:
  Select the project project  to be assigned to the run configuration
C/C++ Application:
  Enter path to the application on Host you want to deploy and run
Remote Absolute File Path to C/C++ Application:
  Enter path to the application on the remote system (including the application
  name)
  
Apply the settings, press 'Run' button to deploy and run remotely the
application.

Remote Debug configuration
--------------------------
For debug convenience you should make a copy of the remote system sysroot on
host and set sysroot in gdb. To make the copy, use runqemu-extract-sdk tool.
Create .gdbinit file in the project and add sysroot config there, e.g.:
set sysroot /home/<user>/Dev/yocto/poky/build/_sysroot

Open C/C++ perspective
Select the project in Project Explorer
Context Menu -> Debug As -> Debug configurations... or 
Menu -> Run -> Debug Configurations...
Select Remote C/C++ Applicationand then "New launch configuration" or select
an existing configuration and then "Duplicate".
Enter a name for the configuration.

Main Tab ->
C/C++ Application:
  Enter path to the application on Host  you want to deploy and debug
Project:
  Select the project project to be assigned to the debug configuration
Connection:
  Select the connection to the remote system
Remote Absolute File Path to C/C++ Application:
  Enter path to the application on the remote system (including the application
  name)
  
Debugger Tab ->
GDB Debugger:
  Enter cross-gdb e.g. arm-poky-linux-gnueabi-gdb. Make sure cross-toolchain
  environment variables are visible in the corresponding Build Configuration.
GDB command file: enter .gdbinit file.

Apply the settings and press 'Debug' button. The project will be built (you can
disable auto build), then deployed to the remote system and gdbserver will be
started remotely on the remote system. Eclipse gdb plugin will connect to the
gdbserver, Debug perspective will open and then you can debug the application
remotely.

*******************************************************************************
2. Remote System Explorer + TCF Add-in + Remote Launcher + GDB
--------------------------------------------------------------

The solution uses TCF framework and tcf_agent to deploy the application to
the remote system.

Install remote system packages
------------------------------
Required: openssh-sftp-server, tcf-agent, gdbserver packages, or just add
packagegroup-core-eclipse-debug to the image.

Install Eclipse plugins
-----------------------
Menu -> Help -> Install New Software -> Work with "Luna ..."
Select Mobile and Device Development -> ...
  -> Remote System Explorer End-User Runtime
  -> TCF Remote System Explorer add-in
  -> C/C++ Remote Launch (Requires RSE Remote System Explorer)

Create TCF-RSE connection
-------------------------
Open RSE perspective:
Menu -> Window -> Open Perspective -> Other... -> Remote System Explorer

Remote Systems -> Icon "Define a connection to remote system" or
Menu -> File -> New -> Other... -> Remote System Explorer -> Connection

System type:
  Select TCF -> Next
Remote TCF System Connection:
  Host Name: enter the remote system IP and a name of the connection -> Next
Files:
  Select tcf.rse.Files -> Next
Processes:
  Select tcf.rse.Processes -> Next
Shells:
  Select tcf.rse.Shells -> Next
Terminals:
  Select tcf.rse.Terminals -> Finish
  
Set default user for remote system:
Remote Systems -> Select the connection -> Context Menu -> Properties -> Host
Default User ID: <user>

Check TCF-RSE connection
------------------------
Run the remote system with the required packages
Eclipse -> Remote Systems -> Select the connection -> Context Menu -> Connect

If the connection is established, you can for example explore files and
processes of the remote system in the Remote Systems window.

Remote Run configuration
------------------------
The configuration is the same like for Method 1, just select TCF connection.

Remote Debug configuration
--------------------------
The configuration is the same like for Method 1, just select TCF connection.


*******************************************************************************
3. TCF Debugger
---------------

TCF framework provides more services of communicating with a remote system:
- Locator (for autodetecting targets on local network)
- Remote File Access (File System Service)
- Remote Processes Access (Processes Service)
- Remote system status (System Monitor Service)
- Debug Services (Memory, Run Control, Registers, Stacktrace, Breakpoints,
  Symbols, Line Numbers, Expressions)
  
For more information about TCF see:
- https://wiki.eclipse.org/TCF
- http://git.eclipse.org/c/tcf/org.eclipse.tcf.git/plain/docs/TCF%20Getting%20Started.html
- http://git.eclipse.org/c/tcf/org.eclipse.tcf.git/plain/docs/TCF%20Specification.html

Unfortunately Yocto 1.6.1 still uses very old version of tcf-agent (2011),
which doesn't fully compile for ARM, thus many its services are excluded. In
order to use TCF only solution, including debugger, you have to use the current
version of tcf_agent.

Install remote system packages
-------------------------------
tcf_agent (make sure you have version TCF_AGENT_1_2_0).

Install Eclipse plugins
-----------------------
Menu -> Help -> Install New Software -> Work with "Luna ..."
Select Mobile and Device Development -> ...
  -> TCF C/C++ Debugger

Run the remote system with the required packages.
  
Remote Run configuration
------------------------
Open C/C++ perspective
Select the project in Project Explorer:
Context Menu -> Run As -> Run configurations... or
Menu -> Run -> Run Configurations...
Select "Target Communication Framework" then "New launch configuration" or 
select an existing configuration and then "Duplicate".
Enter a name for the configuration.
Target Tab ->
  Uncheck options:
  - "Run TCF symbols server on the local host",
  - "Run instance of TCF agent on the local host",
  - "Use local host as the target".
  
TCF shall auto detect remote systems in local network, which run tcf-agent. You
should see the targets in "Available targets" list. Select your target.  

Application Tab ->
  Project: select the project assigned to the run configuration.
  Local File Path: select the binary to be deployed and launched on the remote
  system.
  Remote File Path: Enter the directory for the binary on the target system.

Apply the setting, press 'Run' button to deploy and run remotely the
application.


Remote Debug configuration
--------------------------
Open C/C++ perspective
Select the project in Project Explorer
Context Menu -> Debug As -> Debug configurations... or 
Menu -> Run -> Debug Configurations...
Select "Target Communication Framework" then "New launch configuration" or 
select an existing configuration and then "Duplicate".
Enter a name for the configuration.

Target Tab:
The settings are similar to Run Configuration:

Application Tab:
The settings are similar to Run Configuration:

Apply the settings and press 'Debug' button. The project will be built (you can
disable auto build), then deployed to the remote system and tcf_agent will
start the application. Eclipse TCF Debugger will connect to the tcf_agent,
Debug perspective will open and then you can debug the application
remotely.
