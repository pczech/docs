Yocto 1.6.1 (Poky Daisy 11.0.1)

*******************************************************************************
Debugging build failures
------------------------
bitbake -c <task> <target> 
bitbake -c <task> -f <target> 
bitbake -g -u depexp <target>
bitbake -e [<recipe>]
bitbake -s 

Usefull tasks
-------------
bitbake -c listtasks <target>
    List tasks for given target.

bitbake -c fetchall <target>
    Fetch all the necessary sources without starting the build. This guarantees
    that you have all the sources for that BitBake target when you disconnect
    from the net and want to do the build later offline.

Toolchain targets
-----------------
adt-installer
meta-toolchain
meta-ide-support
-c populate_sdk <image>
buildtools-tarball    
    
Build history
-------------
TODO

*******************************************************************************
Yocto Project Development Environment
-------------------------------------
User Configuration
Metadata Layers
Source Files
Build System
Package Feeds
Images


*******************************************************************************
User Configuration
------------------
cd poky
source oe-init-build-env [<build_dir>]

Environment setup script defines OpenEmbedded build environment settings needed
to complete the build:

PATH=./poky/scripts:./poky/bitbake/bin/
BUILDDIR=./poky/build
BB_ENV_EXTRAWHITE=(...)

The script also creates the Build Directory <build_dir>, which is 'build' by
default and is located in the Source Directory. It creates the configuration
files too:
        
<build_dir>/conf:
  bblayers.conf
  local.conf
  template.conf
  
The ./poky/meta-yocto layer contains a conf directory that has example
configuration files. These example files are used as a basis for creating
actual configuration files when you source the build environment script.

bblayers.conf
    Defines layers (see bitbase.txt for more details). It uses the 
    BBLAYERS_NON_REMOVABLE variable to list layers that must not be removed.
    If bblayers.conf is not present when you start the build, BitBake creates
    it from ./poky/meta-yocto/conf/bblayers.conf.sample when you source the
    build environment setup script.
     
local.conf
    Contains user-defined variables that affect every build, like 
    BB_NUMBER_THREADS, PARALLEL_MAKE, MACHINE. For more details see
    ./poky/build/conf/local.conf. If local.conf is not present when you start
    the build, BitBake creates it from ./poky/meta-yocto/local.conf.sample
    when you source the build environment setup script.
    
template.conf
    The scripts/oe-setup-builddir script uses the $TEMPLATECONF variable to
    determine which sample configuration files to locate (local.conf.sample,
    bblayers.conf.sample).
    
    The source bblayers.conf.sample, local.conf.sample files used depend on the
    $TEMPLATECONF script variable, which defaults to meta-yocto/conf when you
    are building from the Yocto Project development environment and defaults to
    meta/conf when you are building from the OpenEmbedded Core environment. The
    default value is set in poky/.templateconf file, that is used by
    scripts/oe-setup-builddir to create ./poky/build/conf/template.conf
     
    Because the script variable points to the source of the *.conf.sample
    files, this implies that you can base your build from any layer by setting
    the variable in the build environment setup script as follows:
    
    TEMPLATECONF=<your_layer>/conf source oe-init-build-env <build-dir>
    
    Once the build process gets the sample file, it uses sed to substitute
    final ${OEROOT} values for all ##OEROOT## values. 
    
    You can see how the TEMPLATECONF variable is used by looking at the
    scripts/oe-setup-builddir script in the Source Directory.

Finally the environment setup script changes working directory to <build_dir>.


*******************************************************************************
Metadata Layers
---------------
Distro layer (Policy Configuration)
    Provide top-level or general policies for the image or SDK being built. For
    example, this layer would dictate whether BitBake produces RPM or IPK
    packages.
    
    Structure:
    conf/
        distro/<distro>.conf
        layer.conf
    classes/
        *.bbclass
    recipes-*/
        *.bb
        
    The distro layer is selected by the variable DISTRO (usually set in
    local.conf). The variable's argument is the root name of <distro>.conf
    file. For example, the distribution configuration file for the Poky-Tiny
    distribution is meta-yocto/conf/distro/poky-tiny.conf. In order to select
    the Poky-Tiny distribution, the DISTRO variable in local.conf file is set
    as follows: DISTRO = "poky".

BSP layer (Machine Configuration)
    Everything in this layer is specific to the machine for which you are
    building the image or the SDK.
    
    Structure:
    conf/
        machine/<machine>.conf
        layer.conf
    recipes-bsp/
    recipes-core/
    recipes-graphics/
    recipes-kernel/
    
    The target device for which the image is built is selected by the variable
    MACHINE (defined in local.conf). The variable corresponds to a machine 
    configuration file of the same name, thus, when MACHINE is set to "qemux86"
    there exists the corresponding <layer>/conf/machine/qemux86.conf machine
    configuration file.
    
Software layer (Metadata)
    The software layer provides the Metadata for additional software packages
    used during the build. This layer does not include Metadata that is
    specific to the distribution or the machine, which are found in their
    respective layers.


*******************************************************************************
Source Files
------------
Upstream Project Releases
    Exist anywhere in the form of an archived file (e.g. tarball or zip file).
    These files correspond to individual recipes.
    
Local Projects
    Custom software the user provides, which reside somewhere local to a
    project. The canonical method through which to include a local project is
    to use the 'externalsrc' class to include that local project.
    
SCMs
    Bitbake can get source files from an SCM such as Git or Subversion. In this
    case, a repository is cloned or checked out.

Mirrors
    Pre-mirrors are appropriate when you have a shared directory that is not a
    directory defined by the DL_DIR variable. A Pre-mirror typically points to
    a shared directory that is local to your organization. Regular mirrors can
    be any site across the Internet that is used as an alternative location for
    source code when the primary site isn't functioning for some reason or
    another.

Download sequence:
  - local download directory (DL_DIR)
  - pre-mirror sites (PREMIRRORS)
  - the upstream source (SRC_URI)
  - mirror locations (MIRRORS)


*******************************************************************************
Build System (BitBake)
----------------------
The build system produces Images. This process consists of several functional
areas:

Build Directory structure
------------------------- 
<build>/tmp/                                            <- ${TMPDIR}
    work/
        ${PACKAGE_ARCH}-poky-${TARGET_OS}/
            ${PN}/
                ${PV}-${PR}/                            <- ${WORKDIR}
                    ${PN}-${PV}/                        <- ${S} / ${B}
                    image                               <- ${D}
                    package                             <- ${PKGD}
                    packages-split                      <- ${PKGDEST}
                        ${PN}
                    pkgdata                             <- ${PKGDESTWORK}
    sysroots/
        <machine>                                       <- ${STAGING_DIR_HOST}
            pkgdata/                                    <- ${PKGDATA_DIR}
    deploy/                                             <- ${DEPLOY_DIR}
        <package_type>/                                 Package Feeds
            <package_arch>/
                *.<type>
        images/                                         Images
            <machine>                                   <- ${DEPLOY_DIR_IMAGE}
                <kernel-image>                          <- ${KERNEL_IMAGETYPE}
                <root-filesystem-image>                 <- ${IMAGE_FSTYPES}
                <kernel-modules>                        <- ${MODULE_TARBALL_DEPLOY}
                <bootloaders>
                <symlinks>
        sdk/                                            SDK
            <buildtools-tarball>.sh

Source Fetching
---------------
SRC_URI -> do_fetch -> DL_DIR -> do_unpack -> S

The tasks fetch the source files and unpack them into the work directory.
Unpacked source files are pointed to by the S variable. Each recipe has an area
in the Build Directory where the unpacked source code resides.

Examples:
qemux86/tmp/
    work/
        all-poky-linux/encodings/1_1.0.4-r2.1/encodings-1.0.4/
        i586-poky-linux/perl/5.14.3-r1/perl-5.14.3/
        qemux86-poky-linux/init-ifupdown/1.0-r7/init-ifupdown-1.0/
        x86_64-linux/alsa-lib-native/1.0.27.2-r0/alsa-lib-1.0.27.2/
        
qemuarm/tmp/
    work/
        all-poky-linux/encodings/1_1.0.4-r2.1/encodings-1.0.4/
        armv5te-poky-linux-gnueabi/ofono/1.14-r0/ofono-1.14/
        qemuarm-poky-linux-gnueabi/init-ifupdown/1.0-r7/init-ifupdown-1.0/
        x86_64-linux/alsa-lib-native/1.0.27.2-r0/alsa-lib-1.0.27.2/

Patching
--------
SRC_URI -> do_patch -> S

The task processes recipes by using the SRC_URI variable to locate applicable
patch files, which by default are *.patch or *.diff files, or any file if
"apply=yes" is specified for the file in SRC_URI. BitBake finds and applies
multiple patches for a single recipe in the order in which it finds the
patches. Patches are applied to the recipe's source files located in the S
directory.

Configuration and Compilation
-----------------------------
S -> do_configure
This task configures the source by enabling and disabling any build-time and
configuration options for the software being built. Configurations can come
from the recipe itself as well as from an inherited class. Additionally, the
software itself might configure itself depending on the target for which it is
being built.

S -> do_compile -> B
Once a configuration task has been satisfied, BitBake compiles the source.
Compilation occurs in the directory pointed to by the B variable. B directory
is, by default, the same as the S directory.

B -> do_install -> D
This task copies files from the B directory and places them in a holding area
pointed to by the D variable.

Examples:
qemux86/tmp/work/i586-poky-linux/alsa-utils/1.0.27.2-r0/image

Package Splitting
-----------------
D -> do_package -> PKGD
PKGD -> do_packagedata -> PKGDESTWORK
PKGD, PKGDESTWORK -> do_package -> PKGDEST
PKGDESTWORK -> do_packagedata -> PKGDATA_DIR

The tasks combine to analyze the files found in the D directory and split them
into subsets based on available packages and files. The do_packagedata task
creates package metadata based on the analysis such that BitBake can generate
the final packages. The list of packages to be created from the recipe is
defined by PACKAGES variable. The FILES variable defines the files that go into
each package in PACKAGES. Working, staged, and intermediate results of the
analysis and package splitting process use these directories:

PKGD
    Points to the destination directory for files to be packaged before they
    are split into individual packages.

PKGDEST
    Points to the parent directory for files to be packaged after they have
    been split into individual packages.

PKGDESTWORK
    Points to a temporary work area, where do_packagedata creates package
    metadata. It is used by the do_package task to split packages. The
    do_packagedata task then packages the meta data in the temporary work area
    and installs it into a shared directory pointed to by global PKGDATA_DIR.
    
PKGDATA_DIR
    Points to a shared, global-state directory that holds data generated during
    the packaging process. During the packaging process, the do_packagedata
    task packages data for each recipe and installs it into this temporary,
    shared area.
    
Depending on the type of packages being created (RPM, DEB, or IPK), the
do_package_write_* task creates the actual packages and places them in the
Package Feeds area.

Image Generation
----------------
do_rootfs

The root filesystem image generation process uses packages from Package Feeds
depends on many variables and consists of several stages:

Package installation
    It is under control of the package manager (e.g. smart/rpm, opkg, or
    apt/dpkg) regardless of whether or not package management is enabled for
    the target.

Post Installation
    During image generation, BitBake attempts to run all post-installation
    scripts. Any that fail to run on the build host are run on the target when
    the target system is first booted.
    
Optimization
    Then optimizing processes are run across the image. These processes include
    mklibs and prelink. The mklibs process optimizes the size of the libraries.
    A prelink process optimizes the dynamic linking of shared libraries to
    reduce start up time of executables.

Manifest
    Along with writing out the root filesystem image, the do_rootfs task
    creates a manifest file (.manifest) in the same directory as the root
    filesystem image that lists out, line-by-line, the installed packages.
    
Compression
    Is accomplished through several optimization routines designed to reduce
    the overall size of the image.


*******************************************************************************
Package Feeds
-------------
During the package splitting BitBake creates the packages and places them in
the Package Feeds area, located in <build>/tmp/deploy/<package_arch>/ folders.
When it generates images or SDK it gets the packages (.rpm, .deb, .ipk) from
this area.

Examples:
qemux86/tmp/deploy/
    rpm/
        all/
        i586/
        qemux86/

qemuarm/tmp/deploy/
    rpm/
        all/
        armv5te/
        qemuarm/
        
Package types <package_type> are defined by the PACKAGE_CLASSES variable,
usually in local.conf. Package architecture <package_arch> is derived through
the value of the PACKAGE_ARCH variable for each package. For example, packages
can exist for the i586 or qemux86 architectures. The package files themselves
reside within the appropriate architecture folder.


*******************************************************************************
Images
------
The images are compressed forms of the root filesystem that are ready to boot
on target device.

Images are written out to <build>/tmp/deploy/images/<machine>/ folder. This
folder contains any files expected to be loaded on the target device.

Examples:
DEPLOY_DIR = ./build/tmp/deploy
DEPLOY_DIR_IMAGE = ./build/tmp/deploy/images/qemuarm
KERNEL_IMAGETYPE = zImage
IMAGE_FSTYPES = "tar.bz2 ext3"

qemuarm/tmp/
    deploy/
        images/
            qemuarm/
                zImage--3.14+git0+09424cee64_d7a5330e50-r0-qemuarm-20140802104700.bin
                core-image-sato-qemuarm-20140802104700.rootfs.ext3
                core-image-sato-qemuarm-20140802104700.rootfs.tar.bz2
                modules--3.14+git0+09424cee64_d7a5330e50-r0-qemuarm-20140802104700.tgz
symlinks:       zImage
                zImage-qemuarm.bin
                core-image-sato-qemuarm.ext3
                core-image-sato-qemuarm.tar.bz2
                modules-qemuarm.tgz
                
qemux86/tmp/
    deploy/
        images/
            qemux86/
                bzImage--3.14+git0+09424cee64_f9048769cc-r0-qemux86-20140802052959.bin
                core-image-sato-qemux86-20140802052959.rootfs.tar.bz2
                core-image-sato-qemux86-20140802052959.rootfs.ext3
                modules--3.14+git0+09424cee64_f9048769cc-r0-qemux86-20140802052959.tgz
symlinks:       bzImage
                bzImage-qemux86.bin
                core-image-sato-qemux86.ext3
                core-image-sato-qemux86.tar.bz2
                modules-qemux86.tgz


*******************************************************************************
Reuse download directory in other build [offline build]
---------------------------------------
build/download directory containing tarballs can be moved and reused in other
location (e.g. to build offline).

- Create a new poky location (unpack poky-daisy-11.0.1.tar.bz2)
- Initialize build environment
- Copy build/download directory from other location
- Start build

If there is no Internet connection, bitbake returns the error:
Sanity checker: Failed to fetch test data from the network

Solution:
- Add to build/conf/local.conf the following line:
  BB_NO_NETWORK = "1"
- Run bitbake only to parse the recipes:
  bitbake <target> -p
- Discard the changes made in local.conf
- Restart the build


*******************************************************************************
Merge different (x86, arm) installations [offline build]
----------------------------------------
A common practice is to use a different Build Directory for different targets.
- Create a new poky location (unpack poky-daisy-11.0.1.tar.bz2)
- Create poky-daisy-11.0.1/downloads directory
- Copy and merge if needed the content of poky-daisy-11.0.1-x86/build/downloads, 
  poky-daisy-11.0.1-arm/build/downloads to poky-daisy-11.0.1/downloads
- Initialize build environment for qemux86 target:
  source oe-init-build-env qemux86
- Initialize build environment for qemuarm target:
  source oe-init-build-env qemuarm
- Uncomment the line #MACHINE ?= "qemuarm" in qemuarm/conf/local.conf
- Uncomment and update the line #DL_DIR ?= "${TOPDIR}/downloads" in
  qemuarm/conf/local.conf and qemux86/conf/local.conf to:
  DL_DIR ?= "${TOPDIR}/../downloads
- Fix the issue 'Sanity checker: Failed to fetch test data from the network'


*******************************************************************************
Add a new layer to yocto [hob][ypdd]
------------------------
cd ./poky-daisy-1.17.0
source oe-init-build-env
mkdir -p meta-hello/conf
touch meta-hello/conf/layer.conf

- Add the layer to BBLAYERS variable in ./build/conf/bblayers.conf
- Run bitbake core-image-minimal

This empty layer is included and processed, however doesn't modifies the
original layers

Add a new recipe to the new layer [ypdd]
---------------------------------
- Add the recipe ./meta-hello/recipes-hello/images/core-image-hello.bb
- Copy the content from ./meta/recipes-core/images/core-image-minimal.bb
- Run bitbake core-image-hello

ERROR: Nothing PROVIDES 'core-image-hello'

- Add to meta-hello/conf/layer.conf:
  BBFILES += "${LAYERDIR}/recipes-*/*/*.bb"


*******************************************************************************
Add a package to the image [ypdd]
--------------------------
Just add the package (e.g. psplash to add support for a graphical boot logo) to
IMAGE_INSTALL in core-image-hello


*******************************************************************************
Add a new machine support to a layer [hob]
------------------------------------
- Do "Add a new layer to yocto"
mkdir meta-hello/conf/machine
touch meta-hello/conf/machine/helloarm.conf
touch meta-hello/conf/machine/hellox86.conf

hob does not recognize the added machines, because bitbake cannot see the
files yet.

- Add to meta-hello/conf/layer.conf:
  BBPATH .= ":${LAYERDIR}"
  (see bitbake.txt for more details)
- Select the machine in local.conf

*******************************************************************************
Use other kernel in the image
-----------------------------
- Do:
    Add a new layer to yocto
    Add a new recipe to the new layer
    Add a new machine support to a layer

to get:

meta-hello/conf/layer.conf
meta-hello/conf/machine/hellox86.conf
meta-hello/recipes-kernel/linux/kernel-hello_X.X.XX.bb

- Add to hellox86.conf:
  PREFERRED_PROVIDER_virtual/kernel ?= "linux-hello"
- Add to kernel-hello_X.X.XX.bb required fields: LICENSE,


*******************************************************************************
List images
-----------
Images are just common recipes (targets). To list the supported images write:
ls meta*/recipes*/images/*.bb


*******************************************************************************
Application Development Toolkit
-------------------------------

Components:
- Cross-Toolchain
- Sysroot matching the target filesystem
- Eclipse plugin
- QEMU
- User space tools


*******************************************************************************
Cross-Toolchain
---------------
Cross-Development Toolchain is a collection of software development tools and
utilities that run on one architecture and allow you to develop software for a
different, or targeted, architecture. These toolchains contain cross-compilers,
linkers, and debuggers that are specific to the target architecture. The cross-
toolchain works with a matching target sysroot. 

Installation methods
--------------------
ADT installer script
Stand-alone toolchain
System-derived toolchain

Before you can develop using the cross-toolchain, you need to set up the 
cross-development environment by sourcing the toolchain's environment setup
script!


*******************************************************************************
ADT installer script
--------------------
Automates much of the process. For example, you can configure the installation
to install the QEMU emulator and the user-space NFS, specify which root
filesystem profiles to download, and define the target sysroot location.

Check host development packages that support the ADT Installer!

- Build ADT installer tarball:
  bitbake atd-installer
- Run ADT Installer:
  TODO
- Set up the cross-development environment:
  source environment-setup-<...>
  
  
*******************************************************************************
Stand-alone toolchain
---------------------
Download or build an architecture-specific toolchain installer and then run the
script to hand-install the toolchain. The installer includes the pre-built
cross-toolchain, the runqemu script, and support files. If you use this method,
you might still need to install the target sysroot by installing and extracting
it separately.

The tarball installer script name:

poky-eglibc-<host_system>-<image_type>-<arch>-toolchain-<release_version>.sh

- <host_system> - your development system i686 or x86_64.
- <image_type> - image you wish to develop
- <arch> - tuned target architecture: i586, x86_64, powerpc, mips, armv7a, armv5te
- <release_version> - release number of the Yocto Project: 1.6.1, 1.6.1+snapshot

Examples:
poky-eglibc-i686-core-image-minimal-armv7a-vfp-neon-toolchain-1.6.1.sh
poky-eglibc-x86_64-meta-toolchain-armv5te-toolchain-1.6.1.sh  

Build the toolchain installer tarball (method 1)
------------------------------------------------
This method requires you to still install the target sysroot by installing and
extracting it separately.

- Source the build environment setup script (oe-init-build-env)
- Check conf/local.conf, especially MACHINE, SDKMACHINE
- Build toolchain installer:
  bitbake meta-toolchain
  The toolchain installer will be stored in tmp/deploy/sdk, e.g:
  poky-eglibc-x86_64-meta-toolchain-armv5te-toolchain-1.6.1.sh
- Install the toolchain. The first thing the installer prompts you for is the
  directory into which you want to install the toolchain. The default directory
  used is /opt/poky/1.6.1. When the script finishes, the cross-toolchain is
  installed. You will notice environment setup files for the cross-toolchain 
  in the installation directory.
- Extract the Root Filesystem (see later)
- Set up the cross-development environment:
  source environment-setup-<...>
  WARNING. Install it in the default location.


Build the toolchain installer tarball (method 2)
------------------------------------------------
This method has significant advantages over the previous method because it
results in a toolchain installer that contains the sysroot that matches your
target root filesystem.

- Source the build environment setup script (oe-init-build-env)
- Check conf/local.conf, especially MACHINE, SDKMACHINE
- Build toolchain installer:
  bitbake <image> -c populate_sdk
  The toolchain installer will be stored in tmp/deploy/sdk, e.g:
  poky-eglibc-x86_64-core-image-minimal-armv5te-toolchain-1.6.1.sh
  TODO


*******************************************************************************
System-derived toolchain
------------------------ 
If you already have a Build Directory, you can build the cross-toolchain within
the directory. However, as with the previous method, if you need to install the
target sysroot, you must do that separately as well.

 Source the build environment setup script (oe-init-build-env)
- Set MACHINE, SDKMACHINE in conf/local.conf if not configured yet
- Build toolchain installer:
  bitbake meta-ide-support
  The cross-toolchain is generated and populated within the Build Directory.
  You will notice environment setup files for the cross-toolchain in tmp
  folder, for example: environment-setup-armv5te-poky-linux-gnueabi
- Extract the Root Filesystem (see later)
- Set up the cross-development environment:
  source environment-setup-<...>

Extract the Root Filesystem
---------------------------
- Source the cross-development environment setup script 
- Run runqemu-extract-sdk <filesystem image> <dest directory>

Example:
source /opt/poky/1.6.1/environment-setup-i586-poky-linux
runqemu-extract-sdk core-image-sato-sdk-qemux86-2011091411831.rootfs.tar.bz2 \
        $HOME/qemux86-sato


*******************************************************************************
Buildtools
----------
If your host development system does not meet Yocto requirements (git, tar,
python in required versions), you can can resolve this by installing a
buildtools tarball that contains these tools. You can get the tarball one of
two ways: download a pre-built tarball or use BitBake to build the tarball.

- Install yocto
- Init build environment or use an existing one.
- Set SDKMACHINE variable in your local.conf file for a 32-bit (i686) or 64-bit 
  (x86_64) development system.
- Run bitbake buildtools-tarball
  Result: <build>/tmp/deploy/sdk/<builtools-tarball>.sh, e.g.
  poky-eglibc-i686-buildtools-tarball-i586-buildtools-nativesdk-standalone-1.6.1.sh
- Transfer the .sh script to a development directory in your SDK machine, that
  does not meet the Git, tar, or Python requirements.
- Run the .sh script to install the tools: sh poky-eglibc-buildtools.sh. During
  the installation choose directory, e.g. /home/<user>/buildtools
- Source the tools environment setup script:
  source /home/<user>/buildtools/environment-setup-i586-poky-linux

Now you can use Yocto build system on the SDK machine (?)

Example:
- Build core-image-minimal for qemux86 (32bit) platform (this will be a test 
  SDK machine)
- Build buildtools-tarball installer for the machine


*******************************************************************************
Debug support
------------- 
Install <app>-dbg package of your application. Make sure, that your application
is built with -g option and debug information is included to the resulting
binary.

Yocto build system strips the binary of debug symbols in normal package <app>.
For <app>-dbg package, the build system extracts debug symbols and stores them
in a separate file /usr/bin/.debug/<app>, and copies referenced source files to
/usr/src/debug. See <build_dir>/tmp/work/<arch>/<app>/packages-split/
 
For further information see gdb.txt

*******************************************************************************
Cross develop kernel modules
----------------------------
Create a meta layer e.g. meta-ldd for given MACHINE e.g. "qemuarm", SDKMACHINE
e.g. "x84_64", with a target ldd-image-minimal-dev, which includes kernel
development, modules and debug support packages:
IMAGE_INSTALL += "kernel-dev kmod packagegroup-core-eclipse-debug"

See meta-ldd for more details.

Build the target:
$ bitbake ldd-image-minimal-dev

Check if kernel source tree is present in sysroot:
./tmp/sysroots/qemuarm/usr/src/kernel

Prepare the toolchain. Here the system derived toolchain is used (see yocto.txt
for more details and other solutions):
$ bitbake meta-ide-support

Source toolchain environment script:
$ source environment-setup-armv5te-poky-linux-gnueabi

Build kernel scripts (make sure the cross toolchain environment is active):
$ cd ./tmp/sysroots/qemuarm/usr/src/kernel
$ make scripts

,