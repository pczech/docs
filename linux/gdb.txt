*******************************************************************************
Commands
--------

Breakpoints
-----------
break <function>
break <class:method(parameters)>
break <linenumber>
info breakpoints
disable <breakpoint_nr>
tbreak
	Stop program once and then it is removed

Execution
---------
run			r
continue    c
next        n
step        s
Ctrl-C
	Stop execution

set auto-solib-add off
    Do not load shared libraries automatically

Examine variables
-----------------
print <variable>

Modify variables
----------------
set <variable> = <value>

Sources
-------
list
	Print out the lines of code above and below the line the program is
	stopped at.
list -
        
sharedlibrary
------------
info sharedLibrary
sharedlibrary <library>

Registers
---------
info registers

Stack
-----
backtrace   bt

Source files
------------
info source
    Show current source file
info sources
show directories
dir <directory>
	Add directory with source files
symbol-file <file>

Debug running program
---------------------
attach <pid>

pwd 
	Show current working directory ($cwd)
cd <dir>
	Change $cwd


*******************************************************************************
Local debugging (Yocto)
----------------
It is assumed that you debug an application on a target HW, which is running a
kernel image and file system created by Yocto build system. The application to
be debugged on target HW, however, may be built out of the Yocto build system
and not included to the target image produced by the Yocto system. In this case
the application should be built by the cross-toolchain produced by the Yocto
system. The application to be debugged may be also built by Yocto build system
and included to the target image by Yocto, or installed later by a package
manager (rpm, dep, ipk).

In any case the application has to include debugging information, i.e. it shall
be compiled with -g option. If you build the application outside Yocto, usually
you should have Release and Debug targets defined. If you use Yocto to build
your application, you don't need to define debug, release targets. Make only
sure the application binary is not stripped of debug information prior to Yocto
build (Yocto QA shall catch such issues and inform you), because Yocto build
system generates release, debug versions (packages) of your application by
itself. Debug package has just suffix -dbg.

The release, debug packages are generated in the following way: for the release
package, Yocto do_package task strips debug symbols from the binary generated
by build tool used by your application (make, automake, etc). For debug
package, Yocto do_package task splits debug information and stores it in a
separate file and also collects all referenced source files.

Example: helloworld application.
- Release package: helloworld
- Binary: /usr/bin/helloworld

Debug package: helloworld-dbg
- Debug symbols: /usr/bin/.debug/helloword
- Source files: /usr/src/debug/helloworld.c
 
The described solutions have been verified on Yocto 1.6.1 Daisy.

Make sure gdb is installed on the target. If it is not, install the
package gdb.

Application built outside Yocto
-------------------------------
Cross-toolchain (stand-alob, system-derived) is installed on the host. The
application is built by the the toolchain, out of the yocto build system.

Install debug version of your application on target HW. Copy the source files
to the target HW as well (to the same directory).
Run gdb debugger in target HW console:
$ gdb <application>
Check if source files are found by gdb:
(gdb) info source
(gdb) list
 
It may happen that the sources are not on found in the gdb source path. Then
you can fix it by setting substitute-path, extending source path or even
changing $cwd.

More details: https://sourceware.org/gdb/onlinedocs/gdb/Source-Path.html

Application built by Yocto
--------------------------
Install -dbg package of your application (use a package manager) on the target
HW (you can also include the package to the debug-image and install the whole
image on the target).
Run gdb debugger in target HW console:
$ gdb <application>
Check if source files are found by gdb:
(gdb) info source
(gdb) list

Normally gdb should see the source files. If not - check first whether they are
included to the application -dbg package.


*******************************************************************************
Remote debugging (Yocto)
----------------

Due to memory or disk space constraints, it may not be possible to use GDB directly
on the remote target to debug applications. These constraints arise because GDB
needs to load the debugging information and the binaries of the process being
debugged. Additionally, GDB needs to perform many computations to locate
information such as function names, variable names and values, stack traces and
so forth - even before starting the debugging process. These extra computations
place more load on the target system and can alter the characteristics of the
program being debugged.

To help get past the previously mentioned constraints, you can use Gdbserver.
Gdbserver runs on the remote target and does not load any debugging information
from the debugged process. Instead, a GDB instance processes the debugging
information that is run on a remote computer - the host GDB. The host GDB then
sends control commands to Gdbserver to make it stop or start the debugged
program, as well as read or write memory regions of that debugged program. All
the debugging information loaded and processed as well as all the heavy
debugging is done by the host GDB. Offloading these processes gives the
Gdbserver running on the target a chance to remain small and fast.

Because the host GDB is responsible for loading the debugging information and
for doing the necessary processing to make actual debugging happen, the user
has to make sure the host can access the unstripped binaries complete with
their debugging information and also be sure the target is compiled with no
optimizations. The host GDB must also have local access to all the libraries
used by the debugged program. Because Gdbserver does not need any local
debugging information, the binaries on the remote target can remain stripped.
However, the binaries must also be compiled without optimization so they match
the host's binaries.

As the host GDB, cross-gdb must be used, that is part of the cross-toolchain
for the specific target. The cross-gdb understands the target specific EABI
(data size, stack frame organization, registers usage, function parameter
passing, data alignment, etc).

Make sure "gdbserver" package is installed on target HW. If you need to
minimize debugging influence on target HW, you can even use release image on
target HW with gdbserver only installed, and debug-image on Host. (there is no
need to make debug-image sysroot copy on Host, if target HW uses NFS, then
simply install debug-image sysroot on your NFS).

Build and install release-image and "gdbserver" package on target HW.
Build debug-image and extract sysroot on your host out of it.
In short, if you have Yocto build directory:
$ runqemu-extract-sdk tmp/deploy/images/<debug-image>.tar.bz2 <sysroot_direcory>
The sysroot will be generated in <sysroot_directory>

Application built outside Yocto
-------------------------------
Target:
Install release (?) version of your application on target HW. TODO: Verify if
really release version can be used on target, if not just use debug version
(compiled with -g option).
Run gdbserver in target HW console:
$ gdbserver :<port> <application> [<app_args>]
Example:
$ gdbserver :2345 helloworld
 
Host:
Install debug version of your application to <sysroot_directory>
Init cross-toolchain environment, if not initiated yet:
$ source <path-to-toolchain>/environment-setup-armv5te-poky-linux-gnueabi

Run cross-gdb to with the application from the sysroot copy extracted on Host
as the parameter, to load the binary as well as the debugging information:
$ arm-poky-linux-gnueabi-gdb <application>

Set sysroot:
(gdb) set sysroot <sysroot_directory>

Connect gdb to the gdbserver:
(gdb) target remote <ip>:<port>

Check if source files are visible:
(gdb) info source
(gdb) list

(gdb) break main
(gdb) continue


Application built by Yocto
--------------------------
Target:
Install release-image (or release version of your application) on target HW.
Run gdbserver in target HW console:
$ gdbserver :<port> <application> [<aoo_args>]
Example:
$gdbserver :2345 helloworld

Host:
Init cross-toolchain environment if not done yet:
source <path-to-toolchain>/environment-setup-armv5te-poky-linux-gnueabi

Run cross-gdb to with the application from the sysroot copy extracted on Host
as the parameter, to load the binary as well as the debugging information:
$ arm-poky-linux-gnueabi-gdb <application>
 
Check if source files are found by gdb:
(gdb) info source
(gdb) list
 
You will probably get:
No current source file.
<source-file.c>: No such file or directory.
 
Set sysroot:
(gdb) set sysroot <sysroot_directory>
 
Check if source files are found by gdb:
(gdb) info source
(gdb) list
 
You will probably get:
Current source file is <source-file.c>
Compilation directory is /usr/src/debug/.....
in <source-file.c>

gdb running on Host cannot access the source files. It is so, because the
source files path included in the debug information (DW_AT_comp_dir) doesn't
match source files path in the target sysroot copy on Host, for example:
Target: hello.c: /usr/src/debug/...
Host: ~/Dev/yocto/poky/build/_sysroot/usr/src/debug/...

See also https://sourceware.org/ml/gdb/2014-08/msg00091.html.

To solve the issue use substitue_path:
(gdb) set substitute-path <from> <to>

Example:
(gdb) set substitute-path /usr/src/debug /home/<user>/Dev/yocto/poky/build/_sysroot/usr/src/debug/

Check if source files are found by gdb:
Now it should be OK.
 
Connect to gdbserver running on target HW:
(gdb) target remote <target_ip>:<port>
 
Set the initial breakpoint and start the application:
(gdb) break main
(gdb) continue
